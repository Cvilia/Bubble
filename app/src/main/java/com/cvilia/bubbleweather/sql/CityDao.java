package com.cvilia.bubbleweather.sql;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.cvilia.bubbleweather.bean.City;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CITY".
*/
public class CityDao extends AbstractDao<City, String> {

    public static final String TABLENAME = "CITY";

    /**
     * Properties of entity City.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property CityEn = new Property(1, String.class, "cityEn", false, "CITY_EN");
        public final static Property CityZh = new Property(2, String.class, "cityZh", false, "CITY_ZH");
        public final static Property Code = new Property(3, String.class, "code", false, "CODE");
        public final static Property Lat = new Property(4, String.class, "lat", false, "LAT");
        public final static Property LeaderEn = new Property(5, String.class, "leaderEn", false, "LEADER_EN");
        public final static Property LeaderZh = new Property(6, String.class, "leaderZh", false, "LEADER_ZH");
        public final static Property Lon = new Property(7, String.class, "lon", false, "LON");
        public final static Property ProvinceEn = new Property(8, String.class, "provinceEn", false, "PROVINCE_EN");
        public final static Property ProvinceZh = new Property(9, String.class, "provinceZh", false, "PROVINCE_ZH");
    }


    public CityDao(DaoConfig config) {
        super(config);
    }
    
    public CityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CITY\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"CITY_EN\" TEXT," + // 1: cityEn
                "\"CITY_ZH\" TEXT," + // 2: cityZh
                "\"CODE\" TEXT," + // 3: code
                "\"LAT\" TEXT," + // 4: lat
                "\"LEADER_EN\" TEXT," + // 5: leaderEn
                "\"LEADER_ZH\" TEXT," + // 6: leaderZh
                "\"LON\" TEXT," + // 7: lon
                "\"PROVINCE_EN\" TEXT," + // 8: provinceEn
                "\"PROVINCE_ZH\" TEXT);"); // 9: provinceZh
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, City entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String cityEn = entity.getCityEn();
        if (cityEn != null) {
            stmt.bindString(2, cityEn);
        }
 
        String cityZh = entity.getCityZh();
        if (cityZh != null) {
            stmt.bindString(3, cityZh);
        }
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(4, code);
        }
 
        String lat = entity.getLat();
        if (lat != null) {
            stmt.bindString(5, lat);
        }
 
        String leaderEn = entity.getLeaderEn();
        if (leaderEn != null) {
            stmt.bindString(6, leaderEn);
        }
 
        String leaderZh = entity.getLeaderZh();
        if (leaderZh != null) {
            stmt.bindString(7, leaderZh);
        }
 
        String lon = entity.getLon();
        if (lon != null) {
            stmt.bindString(8, lon);
        }
 
        String provinceEn = entity.getProvinceEn();
        if (provinceEn != null) {
            stmt.bindString(9, provinceEn);
        }
 
        String provinceZh = entity.getProvinceZh();
        if (provinceZh != null) {
            stmt.bindString(10, provinceZh);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, City entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String cityEn = entity.getCityEn();
        if (cityEn != null) {
            stmt.bindString(2, cityEn);
        }
 
        String cityZh = entity.getCityZh();
        if (cityZh != null) {
            stmt.bindString(3, cityZh);
        }
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(4, code);
        }
 
        String lat = entity.getLat();
        if (lat != null) {
            stmt.bindString(5, lat);
        }
 
        String leaderEn = entity.getLeaderEn();
        if (leaderEn != null) {
            stmt.bindString(6, leaderEn);
        }
 
        String leaderZh = entity.getLeaderZh();
        if (leaderZh != null) {
            stmt.bindString(7, leaderZh);
        }
 
        String lon = entity.getLon();
        if (lon != null) {
            stmt.bindString(8, lon);
        }
 
        String provinceEn = entity.getProvinceEn();
        if (provinceEn != null) {
            stmt.bindString(9, provinceEn);
        }
 
        String provinceZh = entity.getProvinceZh();
        if (provinceZh != null) {
            stmt.bindString(10, provinceZh);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public City readEntity(Cursor cursor, int offset) {
        City entity = new City( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // cityEn
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // cityZh
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // code
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // lat
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // leaderEn
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // leaderZh
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // lon
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // provinceEn
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // provinceZh
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, City entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setCityEn(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCityZh(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLat(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLeaderEn(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setLeaderZh(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setLon(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setProvinceEn(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setProvinceZh(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final String updateKeyAfterInsert(City entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(City entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(City entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
